const { Kafka } = require("kafkajs");
const db = require("../config/db");
const fs = require("fs").promises;
const path = require("path");
const Minio = require("minio");

const minioClient = new Minio.Client({
  endPoint: process.env.MINIO_ENDPOINT || "localhost",
  port: +process.env.MINIO_PORT || 9000,
  useSSL: process.env.MINIO_USE_SSL === "true",
  accessKey: process.env.MINIO_ACCESS_KEY,
  secretKey: process.env.MINIO_SECRET_KEY,
});

function putObjectAsync(bucket, objectName, buffer, metaData) {
  return new Promise((resolve, reject) => {
    minioClient.putObject(bucket, objectName, buffer, metaData, (err, etag) => {
      if (err) return reject(err);
      resolve(etag);
    });
  });
}

const kafka = new Kafka({
  clientId: "audio-processing-service",
  brokers: [process.env.KAFKA_BROKER || "kafka:9092"],
});
//–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ –∫–∞—Ñ–∫–∏
const consumer = kafka.consumer({ groupId: "audio-processing-group" });
//–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –æ—Ç ml –ø–∞–π–ø–ª–∞–π–Ω–∞
const runConsumer = async () => {
  await consumer.connect();
  await consumer.subscribe({ topic: "app.main.audio_recognised", fromBeginning: true });

  await consumer.run({
    eachMessage: async ({ topic, partition, message }) => {
      const trackUuid = message.key.toString(); // UUID —Ç—Ä–µ–∫–∞
      const payload = JSON.parse(message.value.toString());
      const { final_path, lyrics, llm_decision } = payload;

      console.log(`üì• [audioConsumer] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–∫–∞ ${trackUuid}`);

      try {
        if (llm_decision.is_nsfw) {
          // –¢—Ä–µ–∫ NSFW: —É–¥–∞–ª—è–µ–º –∏–∑ NFS –∏ –ë–î
          await fs.unlink(final_path);
          console.log(`üóëÔ∏è [audioConsumer] –¢—Ä–µ–∫ ${trackUuid} —É–¥–∞–ª—ë–Ω –∏–∑ NFS (NSFW)`);

          await db.query("DELETE FROM public.restorations WHERE id = $1", [trackUuid]);
          console.log(`üóëÔ∏è [audioConsumer] –¢—Ä–µ–∫ ${trackUuid} —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î (NSFW)`);
        } else {
          // –¢—Ä–µ–∫ –Ω–µ NSFW: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ MinIO, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î, —É–¥–∞–ª—è–µ–º –∏–∑ NFS

          // 1. –ü–æ–ª—É—á–∞–µ–º user_id –∏ file_path_original –∏–∑ –ë–î
          const { rows } = await db.query(
            "SELECT user_id, file_path_original FROM public.restorations WHERE id = $1",
            [trackUuid]
          );
          if (rows.length === 0) {
            console.error(`‚ö†Ô∏è [audioConsumer] –¢—Ä–µ–∫ ${trackUuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
            return;
          }
          const { user_id, file_path_original } = rows[0];

          // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º originalname –∏–∑ file_path_original
          const originalname = path.basename(file_path_original);

          // 3. –§–æ—Ä–º–∏—Ä—É–µ–º objectName –¥–ª—è MinIO
          const objectName = `${user_id}/${trackUuid}/${originalname}`;

          // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ NFS –≤ MinIO (–±–∞–∫–µ—Ç "processed")
          const fileBuffer = await fs.readFile(final_path);
          await putObjectAsync("processed", objectName, fileBuffer, {
            "Content-Type": "audio/mpeg", // –£–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π mime-type, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
          });
          console.log(`‚úÖ [audioConsumer] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO: processed/${objectName}`);

          // 5. –û–±–Ω–æ–≤–ª—è–µ–º file_path_processed –≤ restorations
          const minioProcessedPath = `processed/${objectName}`;
          await db.query(
            `UPDATE public.restorations
             SET file_path_processed = $1,
                 status = 'processed'
             WHERE id = $2`,
            [minioProcessedPath, trackUuid]
          );
          console.log(`‚úÖ [audioConsumer] restorations –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è —Ç—Ä–µ–∫–∞ ${trackUuid}`);

          // 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º lyrics –∏ tags –≤ restoration_metadata
          const metadataQuery = `
            INSERT INTO public.restoration_metadata (restoration_id, lyrics, tags)
            VALUES ($1, $2, $3)
            ON CONFLICT (restoration_id)
            DO UPDATE SET lyrics = $2, tags = $3
          `;
          await db.query(metadataQuery, [
            trackUuid,
            JSON.stringify(lyrics),
            JSON.stringify(llm_decision.tags),
          ]);
          console.log(`‚úÖ [audioConsumer] restoration_metadata –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è —Ç—Ä–µ–∫–∞ ${trackUuid}`);

          // 7. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ NFS
          await fs.unlink(final_path);
          console.log(`üóëÔ∏è [audioConsumer] –§–∞–π–ª —É–¥–∞–ª—ë–Ω –∏–∑ NFS: ${final_path}`);
        }
      } catch (error) {
        console.error(`‚ùå [audioConsumer] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ ${trackUuid}:`, error);
      }
    },
  });
};

module.exports = { runConsumer };