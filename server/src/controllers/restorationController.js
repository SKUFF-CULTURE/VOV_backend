const { v4: uuidv4 } = require("uuid");
const sharp = require("sharp");
const Minio = require("minio");
const db = require("../config/db");
const { producer } = require("../services/kafka");
const fs = require("fs").promises;
const path = require("path");
const {
  getCached,
  invalidateCache,
  invalidateCacheByPrefix,
} = require("../utils/RedisCache");

const minioClient = new Minio.Client({
  endPoint: process.env.MINIO_ENDPOINT || "localhost",
  port: +process.env.MINIO_PORT || 9000,
  useSSL: process.env.MINIO_USE_SSL === "true",
  accessKey: process.env.MINIO_ACCESS_KEY,
  secretKey: process.env.MINIO_SECRET_KEY,
});

const BUCKET = process.env.MINIO_BUCKET || "original";
const NFS_PATH = "/nfs/shared";
// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è putObject
function putObjectAsync(bucket, objectName, buffer, metaData) {
  return new Promise((resolve, reject) => {
    minioClient.putObject(bucket, objectName, buffer, metaData, (err, etag) => {
      if (err) return reject(err);
      resolve(etag);
    });
  });
}

// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è presignedGetObject
function presignedGetAsync(bucket, objectName, expires = 3600) {
  return new Promise((resolve, reject) => {
    minioClient.presignedGetObject(bucket, objectName, expires, (err, url) => {
      if (err) return reject(err);
      resolve(url);
    });
  });
}

// === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ===
exports.uploadAudio = async (req, res) => {
  console.log("üì° [uploadAudio] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
  console.log("üì• [uploadAudio] –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", {
    body: req.body,
    file: req.file
      ? {
          originalname: req.file.originalname,
          mimetype: req.file.mimetype,
          size: req.file.size,
        }
      : null,
  });

  try {
    const { file } = req;
    const { userId, artist, songName } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è file –∏ userId
    if (!file || !userId) {
      console.warn("‚ö†Ô∏è [uploadAudio] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç file –∏–ª–∏ userId");
      return res.status(400).json({ error: "file –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userResult = await db.query("SELECT role FROM public.users WHERE id = $1", [userId]);
    if (userResult.rows.length === 0) {
      console.warn("‚ö†Ô∏è [uploadAudio] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    const userRole = userResult.rows[0].role;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "pro"
    if (userRole !== 'pro') {
      console.warn("‚ö†Ô∏è [uploadAudio] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
      return res.status(418).json({ error: "You don't have this functionality" });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è —Ç—Ä–µ–∫–∞
    const id = uuidv4();
    const objectName = `${userId}/${id}/${file.originalname}`;
    const nfsFilePath = path.join(NFS_PATH, userId, id, `${file.originalname}`);
    const processedFilePath = `original/1/43d42004-6524-49b2-81b5-ae68135a6bb4/k_r.mp3`; // –ó–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–ª–∏ –ø—É—Ç—å

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤ NFS
    console.log(`üìÅ [uploadAudio] –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –≤ NFS: ${path.join(NFS_PATH, userId, id)}`);
    await fs.mkdir(path.join(NFS_PATH, userId, id), { recursive: true });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ NFS
    console.log(`üì§ [uploadAudio] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ NFS: ${nfsFilePath}`);
    await fs.writeFile(nfsFilePath, file.buffer);
    console.log(`‚úÖ [uploadAudio] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ NFS: ${nfsFilePath}`);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ MinIO
    console.log(`üì§ [uploadAudio] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ MinIO: ${objectName}`);
    await putObjectAsync(BUCKET, objectName, file.buffer, {
      "Content-Type": file.mimetype,
    });
    console.log(`‚úÖ [uploadAudio] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO: ${objectName}`);

    const minioFilePath = `${BUCKET}/${objectName}`;
    const insert = `
      INSERT INTO public.restorations (id, user_id, file_path_original, file_path_processed, status)
      VALUES ($1, $2, $3, $4, 'uploaded')
      RETURNING id;
    `;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL —Å –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–ª–µ–Ω–Ω—ã–º file_path_processed
    console.log("üìù [uploadAudio] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL:", { id, userId, filePath: minioFilePath, processedFilePath });
    const result = await db.query(insert, [id, userId, minioFilePath, processedFilePath]);
    const trackId = result.rows[0].id;
    console.log(`‚úÖ [uploadAudio] –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ PostgreSQL: id=${trackId}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka
    const message = {
      event: "audio_uploaded",
      client_ip: req.ip || "unknown",
      id: trackId,
      userId,
      filePath: nfsFilePath,
      originalName: file.originalname,
      mimeType: file.mimetype,
      artist,
      songName,
      createdAt: new Date().toISOString(),
    };
    console.log("üì§ [uploadAudio] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka:", message);
    await producer.send({
      topic: "app.main.audio_raw",
      messages: [{ key: trackId, value: JSON.stringify(message) }],
    });
    console.log(`üöÄ [uploadAudio] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka: key=${trackId}`, message);

    return res.status(200).json({ id: trackId, filePath: minioFilePath });
  } catch (e) {
    console.error("‚ùå [uploadAudio] –û–±—â–∞—è –æ—à–∏–±–∫–∞:", e);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", details: e.message });
  }
};
// === 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ===
exports.uploadMetadata = async (req, res) => {
  console.log("üì° [uploadMetadata] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:", req.body);

  try {
    const {
      trackId,
      title = null,
      author = null,
      year = null,
      album = null,
      country = null,
      coverUrl = null,
    } = req.body;

    if (!trackId) {
      console.warn("‚ö†Ô∏è [uploadMetadata] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trackId");
      return res.status(400).json({ error: "trackId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }

    let coverBase64 = null;
    if (coverUrl) {
      const match = coverUrl.match(/^data:(image\/\w+);base64,(.+)$/);
      if (!match) {
        console.warn("‚ö†Ô∏è [uploadMetadata] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç coverUrl");
        return res
          .status(400)
          .json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç coverUrl, –æ–∂–∏–¥–∞–µ—Ç—Å—è data URI" });
      }

      const mimeType = match[1];
      const base64Data = match[2];
      const acceptableFormats = ["image/jpeg", "image/png"];

      if (acceptableFormats.includes(mimeType)) {
        coverBase64 = coverUrl;
      } else {
        const imgBuf = Buffer.from(base64Data, "base64");
        const pngBuf = await sharp(imgBuf).png().toBuffer();
        coverBase64 = `data:image/png;base64,${pngBuf.toString("base64")}`;
      }
    }

    const insertMeta = `
      INSERT INTO public.restoration_metadata
        (restoration_id, title, author, year, album, country, cover_url)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id;
    `;
    const vals = [trackId, title, author, year, album, country, coverBase64];

    console.log("üìù [uploadMetadata] –ó–∞–ø–∏—Å—å –≤ PostgreSQL:", vals);
    const { rows } = await db.query(insertMeta, vals);
    console.log(`‚úÖ [uploadMetadata] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: id=${rows[0].id}`);

    return res.status(200).json({ metadataId: rows[0].id });
  } catch (e) {
    console.error("‚ùå [uploadMetadata] –û—à–∏–±–∫–∞:", e);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö" });
  }
};

// === 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ===
async function resolveObject(trackId, version) {
  console.log(
    `üîç [resolveObject] –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞: trackId=${trackId}, version=${version}`
  );
  const { rows } = await db.query(
    `SELECT file_path_original, file_path_processed
       FROM public.restorations
      WHERE id = $1`,
    [trackId]
  );
  if (!rows.length) {
    console.warn("‚ö†Ô∏è [resolveObject] –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    throw { status: 404, message: "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" };
  }
  const { file_path_original, file_path_processed } = rows[0];
  if (version === "original") return file_path_original;
  if (version === "processed" && file_path_processed)
    return file_path_processed;
  if (!version && file_path_processed) return file_path_processed;
  return file_path_original;
}

// === 1) Streaming with Range support ===
exports.streamTrack = async (req, res) => {
  try {
    const { trackId } = req.params;
    const version = req.query.version || 'original';
    console.log(
      `üì° [streamTrack] –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: trackId=${trackId}, version=${version}`
    );

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const result = await db.query(
      `SELECT file_path_original, file_path_processed 
       FROM public.restorations 
       WHERE id = $1`,
      [trackId]
    );

    if (result.rows.length === 0) {
      console.warn(`‚ö†Ô∏è [streamTrack] –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: trackId=${trackId}`);
      res.status(404).json({ error: "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const { file_path_original, file_path_processed } = result.rows[0];
    let path;

    if (version === 'processed' && file_path_processed) {
      path = file_path_processed;
    } else {
      path = file_path_original;
    }

    const [bucket, ...parts] = path.split("/");
    const objectName = parts.join("/");

    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç play_count
    await db.query(
      "UPDATE public.public_library SET play_count = play_count + 1 WHERE track_id = $1",
      [trackId]
    );

    const stat = await minioClient.statObject(bucket, objectName);
    const total = stat.size;

    const range = req.headers.range;
    let start = 0,
      end = total - 1,
      statusCode = 200;

    if (range) {
      const matches = /bytes=(\d+)-(\d*)/.exec(range);
      if (matches) {
        statusCode = 206;
        start = parseInt(matches[1], 10);
        end = matches[2] ? parseInt(matches[2], 10) : end;

        if (start >= total || start > end) {
          console.warn(`‚ö†Ô∏è [streamTrack] –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${range}`);
          res.status(416).setHeader("Content-Range", `bytes */${total}`).end();
          return;
        }
      }
    }

    const chunkSize = end - start + 1;
    console.log(
      `üì§ [streamTrack] –°—Ç—Ä–∏–º–∏–Ω–≥: start=${start}, end=${end}, chunkSize=${chunkSize}`
    );

    res.status(statusCode);
    res.setHeader("Accept-Ranges", "bytes");
    res.setHeader("Content-Length", chunkSize);
    res.setHeader(
      "Content-Type",
      stat.metaData["content-type"] || "application/octet-stream"
    );
    if (statusCode === 206) {
      res.setHeader("Content-Range", `bytes ${start}-${end}/${total}`);
    }

    const stream = await minioClient.getPartialObject(
      bucket,
      objectName,
      start,
      chunkSize
    );
    stream.on("error", (err) => {
      console.error("‚ùå [streamTrack] –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:", err);
      if (!res.headersSent) res.sendStatus(500);
    });

    stream.pipe(res);
  } catch (err) {
    console.error("‚ùå [streamTrack] –û—à–∏–±–∫–∞:", err);
    res
      .status(err.status || 500)
      .json({ error: err.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞" });
  }
};
// === 2) Download (attachment) ===
exports.downloadTrack = async (req, res) => {
  try {
    const { trackId } = req.params;
    const version = req.query.version;
    console.log(
      `üì° [downloadTrack] –ó–∞–ø—Ä–æ—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: trackId=${trackId}, version=${version}`
    );

    const path = await resolveObject(trackId, version);
    const [bucket, ...parts] = path.split("/");
    const objectName = parts.join("/");

    const stream = await minioClient.getObject(bucket, objectName);
    res.setHeader(
      "Content-Disposition",
      `attachment; filename="${encodeURIComponent(objectName)}"`
    );
    res.setHeader("Content-Type", "application/octet-stream");
    stream.pipe(res);
    stream.on("error", (err) => {
      console.error("‚ùå [downloadTrack] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", err);
      if (!res.headersSent) res.sendStatus(500);
    });
  } catch (err) {
    console.error("‚ùå [downloadTrack] –û—à–∏–±–∫–∞:", err);
    res
      .status(err.status || 500)
      .json({ error: err.message || "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞" });
  }
};

exports.getTrackLyrics = async (req, res) => {
  const { trackId } = req.body;
  if (!trackId) {
    return res.status(400).json({ error: "trackId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
    const track = await db.query(
      "SELECT 1 FROM public.restorations WHERE id = $1",
      [trackId]
    );
    if (track.rowCount === 0) {
      return res.status(404).json({ error: "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    // –ü–æ–ª—É—á–∞–µ–º lyrics –∏–∑ restoration_metadata
    const { rows } = await db.query(
      `SELECT lyrics
       FROM public.restoration_metadata
       WHERE restoration_id = $1`,
      [trackId]
    );
    if (rows.length === 0) {
      return res.status(404).json({ error: "Lyrics –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞" });
    }
    return res.status(200).json({ lyrics: rows[0].lyrics });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ getTrackLyrics ${trackId}:`, err);
    return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};


exports.isReady = async (req, res) => {
  const { trackId } = req.query;
  console.log(`üì° [isReady] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: trackId=${trackId}`);
  
  if (!trackId) {
    console.warn("‚ö†Ô∏è [isReady] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç trackId");
    return res.status(400).json({ error: "trackId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    const result = await db.query(
      "SELECT file_path_processed FROM public.restorations WHERE id = $1",
      [trackId]
    );

    if (result.rowCount === 0) {
      console.warn(`‚ö†Ô∏è [isReady] –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: trackId=${trackId}`);
      return res.status(404).json({ error: "–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const filePathProcessed = result.rows[0].file_path_processed;
    console.log(`‚ÑπÔ∏è [isReady] –ü—É—Ç—å –∫ —Ä–µ—Å—Ç–∞–≤—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É: ${filePathProcessed || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

    if (!filePathProcessed) {
      return res.status(200).json({ status: "still processing" });
    } else {
      return res.status(200).json({ status: "finalized" });
    }
  } catch (err) {
    console.error(`‚ùå [isReady] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ trackId=${trackId}:`, err);
    return res.status(500).json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};