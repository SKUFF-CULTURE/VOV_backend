# version: '3.8'  # Явно указываем версию

# version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node  # Исправлено
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-fsSL", "http://localhost:9200/_cluster/health?wait_for_status=yellow"]
      interval: 10s
      retries: 5
    networks:
      - kafka-network

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_MAX_CLIENT_CNXNS: 60
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "zkServer.sh status"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    build:
      context: .
      dockerfile: Dockerfile.kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
    networks:
      - kafka-network
    depends_on:
      zookeeper:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - kafka-data:/bitnami/kafka

  db:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    env_file:
      - postgres.env
    ports:
      - "5434:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
      - nfs-data:/mnt/nfs_share
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  server:
    build: ./server
    container_name: server
    env_file:
      - server_config.env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    environment:
      PORT: 5000
      NODE_ENV: development
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - nfs-data:/mnt/nfs_share
      - ./server/node_modules:/app/node_modules
    networks:
      - kafka-network
    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  reindex-cron:
    build: ./server
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - NODE_ENV=development
    depends_on:
      - server
      - elasticsearch
      - db
    volumes:
      - ./server:/app
      - ./server/node_modules:/app/node_modules  # Монтируем локальные node_modules
    command: npm run reindex:cron
    

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - kafka-network
    restart: unless-stopped
    command: redis-server --requirepass your_redis_password

  s3-minio:
    build:
      context: .
      dockerfile: Dockerfile.minio
    container_name: s3-minio
    ports:
      - "9000:9000"
      - "9090:9090"
    env_file:
      - s3-minio.env
    environment:
      MINIO_BROWSER: "on"
      MINIO_SERVER_URL: "http://localhost:9000"
    command: server /data --console-address ":9090"
    volumes:
      - minio-data:/data
    networks:
      - kafka-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
  # nfs-server:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.nfs
  #   container_name: nfs-server
  #   volumes:
  #     - nfs-data:/mnt/nfs_share
  #   privileged: true
  #   ports:
  #     - "2049:2049"
  #   networks:
  #     - kafka-network
  #   restart: unless-stopped

networks:
  kafka-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  db-data:
  nfs-data:
  minio-data:
  kafka-data:
  esdata:
    driver: local


